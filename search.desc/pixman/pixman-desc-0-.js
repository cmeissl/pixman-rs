searchState.loadedDescShard("pixman", 0, "From the official pixman docs:\n1bpp A1\n4bpp A1B1G1R1\n16bpp A1B5G5R5\n4bpp A1R1G1B1\n16bpp A1R5G5B5\n32bpp A2B10G10R10\n8bpp A2B2G2R2\n32bpp A2R10G10B10\n8bpp A2R2G2B2\n4bpp A4\n16bpp A4B4G4R4\n16bpp A4R4G4B4\n8bpp A8\n32bpp A8B8G8R8\n32bpp A8R8G8B8\nsRGB A8R8G8B8sRGB\nAdd\nA-top\nA-top-reverse\n4bpp B1G2R1\n8bpp B2G3R3\n16bpp B5G6R5\n24bpp B8G8R8\n32bpp B8G8R8A8\n32bpp B8G8R8X8\nBest dithering\nBest filtering\nBilinear filtering\n16bit Box\n32bit Box\n4bpp C4\n8bpp C8\nClear\nRgba color in the range of <code>u16::MIN</code> to <code>u16::MAX</code>\nColor burn\nColor dodge\nConical gradient image\nConjoint-a-top\nConjoint-a-top-reverse\nConjoint-clear\nConjoint-dst\nConjoint-in\nConjoint-in-reverse\nConjoint-out\nConjoint-out-reverse\nConjoint-over\nConjoint-over-reverse\nConjoint-src\nConjoint-xor\nCustom convolution kernel\nResource creation failed\nDarken\nDifference\nDisjoint-a-top\nDisjoint-a-top-reverse\nDisjoint-clear\nDisjoint-dst\nDisjoint-in\nDisjoint-in-reverse\nDisjoint-out\nDisjoint-out-reverse\nDisjoint-over\nDisjoint-over-reverse\nDisjoint-src\nDisjoint-xor\nDefiens the possible dither operations\nDst\nDefines a single edge\nExclustion\nFloating-point transform\nFloating-point vector\nFast dithering\nFast filtering\nDefines the possible filter operations\nFixed-point value\nPossible format codes\n1bpp G1\n4bpp G4\n8bpp G8\nGood dithering\nGood filtering\nGradient-stop\nHard-light\nHls color\nHls hue\nHls luminosity\nHls saturation\nImage holding some pixel data\nA reference to a raw image\nIn\nRegion contains a rectangle\nIn-reverse\nLighten\nSingle line\nLinear gradient image\nMultiply\nNearest-neighbor filtering\nNo dithering\nNo repeat\nNormal repeat\nOne\nDefines the possible operations for composition\nThe requested operation failed\nOrdered bayer 8 dithering\nOrdered blue noise 64\nOut\nNo intersection\nOut-reverse\nOver\nOver-reverse\nDescribes overlap of a region with a rectangle\nOverlay\nPad repeat\nPartial intersection\nA single point\n4bpp R1G2B1\n8bpp R3G3B2\n16bpp R5G6B5\n24bpp R8G8B8\n32bpp R8G8B8A8\n32bpp R8G8B8X8\nRadial gradient image\n16bit Rectangle\n32bit Rectangle\nReflect repeat\n16bit region\n32bit region\nDefines the possible repeat operations\n96bpp RgbFloat\n128bpp RgbaFloat\nSaturate\nScreen\nCustom separable convolution kernel\nSoft-light\nSolid color image\nA single span\nSrc\nFixed-point transform\nFailed to init Transform from FTransform\nA single trap\nA trapezoid\nA triangle\nThe dither operation is unknown\nThe filter operation is unknown\nThe operation is unknown\nThe repeat operations is unknown\nThe provided drm-fourcc has no matching format code\nThe provided format code has no matching drm-fourcc\nA single vector\n32bpp X14R6G6B6\n16bpp X1B5G5R5\n16bpp X1R5G5B5\n32bpp X2B10G10R10\n32bpp X2R10G10B10\n8bpp X4A4\n16bpp X4B4G4R4\n8bpp X4C4\n8bpp X4G4\n16bpp X4R4G4B4\n32bpp X8B8G8R8\n32bpp X8R8G8B8\nXor\nYUV YUY2\nYUV YV12\nZero\nGet the alpha color component\nAdd the specified trapezoids to this image\nAdd the specified traps to this image\nAdd the specified triangles to this image\nAccess the raw image pointer\nGet the blue color component\nBlit the src into the dst with the specified values\nAccess the bot value of this trap\nAccess the bottom component of the trapezoid\nGet the bpp for the specified format\nClear this region\nClear this region\nClear a previously set alpha map\nClear a previously set alpha map\nClear a previously set alpha map\nClear a previously set alpha map\nClear a previously set alpha map\nClear a previously applied transform\nAccess the stop color\nWhether the image has component alpha or unified alpha\nComposite the specified src image into this image\nComposite the specified src image into this image\nComposite the specified trapezoids into this image\nComposite the specified triangles into this image\nCompute the composite region for the specified src\nWhether this region contains the provided point\nWhether this region contains the provided point\nWhether this region contains the provided rectangle\nWhether this region contains the provided rectangle\nAccess the underlying pixel data\nGet the depth of the image\nFill the provided bits with the provided values\nFill this image with the specified boxes and color\nFill this image with the specified rectangles and color\nGet the format of the image\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize this fixed-point from an <code>f64</code>\nCreate a <code>Color</code> from the provided components\nCreate a <code>Color</code> from the provided components\nInitialize this fixed-point from an integer\nInitialize one edge structure given a line, starting y …\nInitialize the image from a raw pointer\nInitialize the image from a raw pointer\nInitialize the image from a raw pointer\nInitialize the image from a raw pointer\nInitialize the image from a raw pointer\nCreate a reference to a raw image\nInitialize this fixed-point from a raw value\nCreate an image from some pre-allocated pixel data pointer\nInitialize a transform from a rotation\nInitialize a transform from a rotation\nInitialize a transform from a scale\nInitialize a transform from a scale\nCreate an image from some pre-allocated pixel data\nInitialize a transform from a translation\nInitialize a transform from a translation\nCreate a <code>Color</code> from the provided color value\nGet the green color component\nGet the height of the image\nInitialize an identity transform\nInitialize an identity transform\nInitialize a region from the provided values\nInitialize a region from the provided values\nInitialize the region from the provided boxes\nInitialize the region from the provided boxes\nInitialize the region from the provided extents\nInitialize the region from the provided extents\nIntersect the region with another region\nIntersect the region with another region\nIntersect the region with a rect\nIntersect the region with a rect\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess the raw fixed-point value\nTake a region and a box and return a region that is …\nTake a region and a box and return a region that is …\nInvert this transform\nInvert this transform\nWhether this transform represents an identity transform\nTODO: Docs\nWhether this transform represents an inverse transform\nWhether this region is empty\nWhether this region is empty\nWhether this transform contains a scale transform\nGet the l component of this span\nAccess the left component of the trapezoid\nAccess the current transform matrix\nAccess the current transform matrix\nMultiply this transform with the provided transform\nMultiply this transform with the provided transform\nReturn the number of rects in this region\nReturn the number of rects in this region\nCreate a <code>Color</code> from the provided components\nCreate a edge from the provided values\nInitialize the gradient stop from the provided valued\nCreate a new image with the specified format and size\nCreate a new conical gradient image usable as the src in …\nCreate a new linear gradient image usable as the src in …\nCreate a new radial gradient image usable as the src in …\nCreate a new solid color image usable as the src in blit …\nInitialize a line from two points\nInitialize the point from x and y values\nInitialize the span with from the provided components\nInitialize a transform from the provided matrix\nInitialize a transform from the provided matrix\nInitialize the trap from the provided values\nInitialize a trapezoid from the provided values\nInitialize the triangle from the provided values\nInitialize a vector from the provided values\nInitialize the vector from the specified values\nAccess the first point\nAccess the first point of this triangle\nAccess the second point\nAccess the second point of this triangle\nAccess the third point of this triangle\nGet the red color component\nGet the r component of this span\nRasterize the specified edges\nRasterize the specified trapezoids\nReturns the rectangles in this region\nReturns the rectangles in this region\nReset this region to the provided box\nReset this region to the provided box\nAccess the right component of the trapezoid\nAdd a rotation to this transform\nAdd a rotation to this transform\nCompute the smallest value greater than or equal to y …\nCompute the largest value strictly less than y which is on …\nAdd a scale to this transform\nAdd a scale to this transform\nRun a selfcheck on the region\nRun a selfcheck on the region\nSet an alpha map that will be used when this image is used …\nSet an alpha map that will be used when this image is used …\nSet an alpha map that will be used when this image is used …\nSet an alpha map that will be used when this image is used …\nSet an alpha map that will be used when this image is used …\nApply a clip region used during composition\nApply a clip region used during composition\nSet whether the image has component alpha or unified alpha\nSet the dither operation used during composition\nSet the dither offset\nSet the filter operation used during composition\nSet whether the source clip was set by a client\nSet the repeat operation for this image\nSet whether the clip applies when the image is used as a …\nApply the specified transform during sampling from this …\nStep an edge by any amount (including negative values)\nGet the stride of the image\nSubtract reg_s from reg_m and leave the result in reg_d. S …\nSubtract reg_s from reg_m and leave the result in reg_d. S …\nGet the int value of this fixed point\nAccess the top value of this trap\nAccess the top component of the trapezoid\nTransform the provided bounds\nTransform the provided bounds\nTransform the given point\nTransform the given point\nTransform the given point\nTransform the given point\nTranslate this region by the specified amount\nTranslate this region by the specified amount\nAdd a translation to this transform\nAdd a translation to this transform\nCreate the union between this region and another region\nCreate the union between this region and another region\nCreate the union between this region and the provided rect\nCreate the union between this region and the provided rect\nGet the width of the image\nAccess the stop x value\nAccess the x value\nAccess the x component of this vector\nAccess the x component of this vector\nAccess the y value\nGet the y component of this span\nAccess the y component of this vector\nAccess the y component of this vector\nAccess the z component of this vector\nAccess the z component of this vector")